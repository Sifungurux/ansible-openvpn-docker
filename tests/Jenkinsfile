#!/usr/bin/env groovy

import groovy.json.JsonOutput
import java.util.Optional
import hudson.tasks.test.AbstractTestResultAction
import hudson.model.Actionable
import hudson.tasks.junit.CaseResult


def isPublishingBranch = { ->
    return env.GIT_BRANCH == 'origin/master' || env.GIT_BRANCH =~ /release.+/
}

def slackNotificationChannel = 'jenkins'
def notifySlack(text, channel, attachments) {
    // Edit the slackURL to match your settings
    def slackURL = 'https://hooks.slack.com/services/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'
    def jenkinsIcon = 'https://wiki.jenkins-ci.org/download/attachments/2916393/logo.png'

    def payload = JsonOutput.toJson([text: text,
        channel: channel,
        username: "Jenkins",
        icon_url: jenkinsIcon,
        attachments: attachments
    ])

    sh "curl -X POST --data-urlencode \'payload=${payload}\' ${slackURL}"
}

def getGitAuthor = {
    def commit = sh(returnStdout: true, script: 'git rev-parse HEAD')
    author = sh(returnStdout: true, script: "git --no-pager show -s --format='%an' ${commit}").trim()
}

def getLastCommitMessage = {
    message = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
}

def getWorkingBranch = {
    branch = sh(returnStdout: true, script: "git rev-parse --abbrev-ref HEAD").trim()
}

@NonCPS
def getTestSummary = { ->
    def testResultAction = currentBuild.rawBuild.getAction(AbstractTestResultAction.class)
    def summary = ""

    if (testResultAction != null) {
        total = testResultAction.getTotalCount()
        failed = testResultAction.getFailCount()
        skipped = testResultAction.getSkipCount()

        summary = "Passed: " + (total - failed - skipped)
        summary = summary + (", Failed: " + failed)
        summary = summary + (", Skipped: " + skipped)
    } else {
        summary = "No tests found"
    }
    return summary
}

@NonCPS
def getFailedTests = { ->
    def testResultAction = currentBuild.rawBuild.getAction(AbstractTestResultAction.class)
    def failedTestsString = "```"

    if (testResultAction != null) {
        def failedTests = testResultAction.getFailedTests()
        
        if (failedTests.size() > 9) {
            failedTests = failedTests.subList(0, 8)
        }

        for(CaseResult cr : failedTests) {
            failedTestsString = failedTestsString + "${cr.getFullDisplayName()}:\n${cr.getErrorDetails()}\n\n"
        }
        failedTestsString = failedTestsString + "```"
    }
    return failedTestsString
}

def populateGlobalVariables = {
    getLastCommitMessage()
    getWorkingBranch()
    getGitAuthor()
    testSummary = getTestSummary()
}
pipeline {
    agent any
    stages {
       stage ('Starting build'){
           steps {
                 notifySlack("Build started!", slackNotificationChannel, [])
           }
       }
       stage ('Clone/build/Run'){
           steps {
		// Change this line to match your repo
                git credentialsId: '055739b4-29e7-40f2-abb9-c1354b359094', url: 'git@github.com:Sifungurux/ansible-openvpn-docker.git'
                sh 'docker build -t jenkins/openvpn-auto . || true'
		junit '**/target/*.xml'
        	sh 'docker create -v /etc/openvpn/certs -v /etc/openvpn/clients --name ovpn_datacontainer alpine || true'
                junit '**/target/*.xml'
		   
                script {
                    populateGlobalVariables()
                    def buildColor = currentBuild.result == null ? "good" : "warning"
                    def buildStatus = currentBuild.result == null ? "Success" : currentBuild.result
                    def jobName = "${env.JOB_NAME}"
                } 
           }
       }
       stage ('Provisioning the build'){
           steps {
                sh ('docker run -itd --volumes-from ovpn_datacontainer --name openvpn_test --privileged --cap-add=NET_ADMIN jenkins/openvpn-auto setup')
           
                script {
                    populateGlobalVariables()

                def buildColor = currentBuild.result == null ? "good" : "warning"
                def buildStatus = currentBuild.result == null ? "Success" : currentBuild.result
                def jobName = "${env.JOB_NAME}"
                } 
           }
       }
       stage ('Test running openvpn service'){
           steps {
                script {
                    sh "docker exec -i openvpn_test /etc/init.d/openvpn status"
                
                    populateGlobalVariables()

                    def buildColor = currentBuild.result == null ? "good" : "warning"
                    def buildStatus = currentBuild.result == null ? "Success" : currentBuild.result
                    def jobName = "${env.JOB_NAME}"
                }
           }
       }
   }
   post {
        always {
          script {  
            sh ('docker stop openvpn_test &&  docker rm openvpn_test && docker rm ovpn_datacontainer && docker rmi jenkins/openvpn-auto')
            populateGlobalVariables()
            
          }
        }
        success {
	       script { 
                  populateGlobalVariables()
                  def buildStatus = currentBuild.result == null ? "Success" : currentBuild.result

                  notifySlack("", slackNotificationChannel, [
                    [
                        title: "${env.JOB_NAME}, build #${env.BUILD_NUMBER}",
                        title_link: "${env.BUILD_URL}",
                 //       color: "${buildColor}",
                        author_name: "${author}",
                        text: "${buildStatus}\n${author}",
                        fields: [
                            [
                                title: "Branch",
                                value: "${branch}",
                                short: true
                            ],
                            [
                                title: "Test Results",
                                value: "${testSummary}",
                                short: true
                            ],
                            [
                                title: "Last Commit",
                                value: "${message}",
                                short: false
                            ]
                        ]
                    ]
                ])
               }
        }   
        failure {
            script {     
                if (isPublishingBranch()) {
                    buildStatus = "MasterFailed"
                }

                def buildStatus = currentBuild.result == null ? "Success" : currentBuild.result

                buildColor = "danger"
                def failedTestsString = getFailedTests()

                notifySlack("", slackNotificationChannel, [
                    [
                        title: "${env.JOB_NAME}, build #${env.BUILD_NUMBER}",
                        title_link: "${env.BUILD_URL}",
                   //     color: "${buildColor}",
                        text: "${buildStatus}\n${author}",
                        "mrkdwn_in": ["fields"],
                        fields: [
                            [
                                title: "Branch",
                                value: "${branch}",
                                short: true
                            ],
                            [
                                title: "Test Results",
                                value: "${testSummary}",
                                short: true
                            ],
                            [
                                title: "Last Commit",
                                value: "${message}",
                                short: false
                            ]
                        ]
                    ],
                    [
                        title: "Failed Tests",
                        color: "${buildColor}",
                        text: "${failedTestsString}",
                        "mrkdwn_in": ["text"],
                    ]
                ])
           }          
       } 

  }
}
